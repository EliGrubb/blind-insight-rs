/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Material : Encrypted material object.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Material {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "created")]
    pub created: String,
    /// The encrypted material.
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// The signature of the material.
    #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
    pub signature: Option<String>,
    #[serde(rename = "proof")]
    pub proof: String,
    #[serde(rename = "request")]
    pub request: String,
    /// The identity that uploaded this material.
    #[serde(rename = "uploaded_by")]
    pub uploaded_by: String,
}

impl Material {
    /// Encrypted material object.
    pub fn new(id: String, url: String, created: String, proof: String, request: String, uploaded_by: String) -> Material {
        Material {
            id,
            url,
            created,
            payload: None,
            signature: None,
            proof,
            request,
            uploaded_by,
        }
    }
}

