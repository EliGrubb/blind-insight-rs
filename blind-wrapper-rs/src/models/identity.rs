/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Identity : HyperlinkedModelSerializer with `id` as the first field.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Identity {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "user")]
    pub user: String,
    /// The device ID associated with this identity.
    #[serde(rename = "device_id")]
    pub device_id: String,
    /// The primary PGP key for the identity.
    #[serde(rename = "primary_public_key")]
    pub primary_public_key: String,
    /// The PGP sub-key for the identity.
    #[serde(rename = "sub_public_key")]
    pub sub_public_key: String,
}

impl Identity {
    /// HyperlinkedModelSerializer with `id` as the first field.
    pub fn new(id: String, url: String, user: String, device_id: String, primary_public_key: String, sub_public_key: String) -> Identity {
        Identity {
            id,
            url,
            user,
            device_id,
            primary_public_key,
            sub_public_key,
        }
    }
}

