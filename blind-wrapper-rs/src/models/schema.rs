/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Schema : HyperlinkedModelSerializer with `id` as the first field.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Schema {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "dataset")]
    pub dataset: String,
    /// A human-readable name for this schema.
    #[serde(rename = "name")]
    pub name: String,
    /// A unique slug for this schema.
    #[serde(rename = "slug", skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    /// A longer description of the schema.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The JSON schema definition.
    #[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<serde_json::Value>,
}

impl Schema {
    /// HyperlinkedModelSerializer with `id` as the first field.
    pub fn new(id: String, url: String, dataset: String, name: String) -> Schema {
        Schema {
            id,
            url,
            dataset,
            name,
            slug: None,
            description: None,
            schema: None,
        }
    }
}

