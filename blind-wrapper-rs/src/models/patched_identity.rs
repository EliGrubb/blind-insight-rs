/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PatchedIdentity : HyperlinkedModelSerializer with `id` as the first field.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchedIdentity {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    /// The device ID associated with this identity.
    #[serde(rename = "device_id", skip_serializing_if = "Option::is_none")]
    pub device_id: Option<String>,
    /// The primary PGP key for the identity.
    #[serde(rename = "primary_public_key", skip_serializing_if = "Option::is_none")]
    pub primary_public_key: Option<String>,
    /// The PGP sub-key for the identity.
    #[serde(rename = "sub_public_key", skip_serializing_if = "Option::is_none")]
    pub sub_public_key: Option<String>,
}

impl PatchedIdentity {
    /// HyperlinkedModelSerializer with `id` as the first field.
    pub fn new() -> PatchedIdentity {
        PatchedIdentity {
            id: None,
            url: None,
            user: None,
            device_id: None,
            primary_public_key: None,
            sub_public_key: None,
        }
    }
}

