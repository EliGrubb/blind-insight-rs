/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrganizationUserProfile : Oerloads DefaultUserProfileSerializer to include organization_name and organization_slug.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrganizationUserProfile {
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "id")]
    pub id: String,
    /// First name (optional)
    #[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    /// Last name (optional)
    #[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    /// Organization Name
    #[serde(rename = "organization_name")]
    pub organization_name: String,
    /// Organization URL
    #[serde(rename = "organization_slug")]
    pub organization_slug: String,
    #[serde(rename = "url")]
    pub url: String,
}

impl OrganizationUserProfile {
    /// Oerloads DefaultUserProfileSerializer to include organization_name and organization_slug.
    pub fn new(email: String, id: String, organization_name: String, organization_slug: String, url: String) -> OrganizationUserProfile {
        OrganizationUserProfile {
            email,
            id,
            first_name: None,
            last_name: None,
            organization_name,
            organization_slug,
            url,
        }
    }
}

