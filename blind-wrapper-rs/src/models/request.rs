/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Request : HyperlinkedModelSerializer with `id` as the first field.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Request {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "identity")]
    pub identity: Box<models::Identity>,
    #[serde(rename = "schema")]
    pub schema: String,
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "modified")]
    pub modified: String,
    #[serde(rename = "field_name")]
    pub field_name: String,
    #[serde(rename = "expires")]
    pub expires: String,
    #[serde(rename = "received", skip_serializing_if = "Option::is_none")]
    pub received: Option<bool>,
    #[serde(rename = "fulfilled", skip_serializing_if = "Option::is_none")]
    pub fulfilled: Option<bool>,
}

impl Request {
    /// HyperlinkedModelSerializer with `id` as the first field.
    pub fn new(id: String, url: String, identity: models::Identity, schema: String, created: String, modified: String, field_name: String, expires: String) -> Request {
        Request {
            id,
            url,
            identity: Box::new(identity),
            schema,
            created,
            modified,
            field_name,
            expires,
            received: None,
            fulfilled: None,
        }
    }
}

