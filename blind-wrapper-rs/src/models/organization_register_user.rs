/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrganizationRegisterUser : Overloads DefaultRegisterUserSerializer to create an organization.  Note that this explicitly disallows a slug from being specified on-create.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrganizationRegisterUser {
    #[serde(rename = "password")]
    pub password: String,
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "id")]
    pub id: String,
    /// First name (optional)
    #[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    /// Last name (optional)
    #[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "password_confirm")]
    pub password_confirm: String,
    /// Organization Name
    #[serde(rename = "organization_name")]
    pub organization_name: String,
}

impl OrganizationRegisterUser {
    /// Overloads DefaultRegisterUserSerializer to create an organization.  Note that this explicitly disallows a slug from being specified on-create.
    pub fn new(password: String, email: String, id: String, password_confirm: String, organization_name: String) -> OrganizationRegisterUser {
        OrganizationRegisterUser {
            password,
            email,
            id,
            first_name: None,
            last_name: None,
            password_confirm,
            organization_name,
        }
    }
}

