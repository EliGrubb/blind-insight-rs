/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PatchedOrganizationInvitation : HyperlinkedModelSerializer with `id` as the first field.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchedOrganizationInvitation {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    #[serde(rename = "guid", skip_serializing_if = "Option::is_none")]
    pub guid: Option<uuid::Uuid>,
    /// The contact identifier for the invitee, email, phone number, social media handle, etc.
    #[serde(rename = "invitee_identifier", skip_serializing_if = "Option::is_none")]
    pub invitee_identifier: Option<String>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "modified", skip_serializing_if = "Option::is_none")]
    pub modified: Option<String>,
    #[serde(rename = "invited_by", skip_serializing_if = "Option::is_none")]
    pub invited_by: Option<String>,
    #[serde(rename = "invitee", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub invitee: Option<Option<String>>,
}

impl PatchedOrganizationInvitation {
    /// HyperlinkedModelSerializer with `id` as the first field.
    pub fn new() -> PatchedOrganizationInvitation {
        PatchedOrganizationInvitation {
            id: None,
            url: None,
            organization: None,
            guid: None,
            invitee_identifier: None,
            created: None,
            modified: None,
            invited_by: None,
            invitee: None,
        }
    }
}

