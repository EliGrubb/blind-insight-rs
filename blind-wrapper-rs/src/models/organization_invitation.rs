/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrganizationInvitation : HyperlinkedModelSerializer with `id` as the first field.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrganizationInvitation {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "organization")]
    pub organization: String,
    #[serde(rename = "guid")]
    pub guid: uuid::Uuid,
    /// The contact identifier for the invitee, email, phone number, social media handle, etc.
    #[serde(rename = "invitee_identifier")]
    pub invitee_identifier: String,
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "modified")]
    pub modified: String,
    #[serde(rename = "invited_by")]
    pub invited_by: String,
    #[serde(rename = "invitee", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub invitee: Option<Option<String>>,
}

impl OrganizationInvitation {
    /// HyperlinkedModelSerializer with `id` as the first field.
    pub fn new(id: String, url: String, organization: String, guid: uuid::Uuid, invitee_identifier: String, created: String, modified: String, invited_by: String) -> OrganizationInvitation {
        OrganizationInvitation {
            id,
            url,
            organization,
            guid,
            invitee_identifier,
            created,
            modified,
            invited_by,
            invitee: None,
        }
    }
}

