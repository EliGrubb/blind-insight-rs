/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DefaultLogin : Default serializer used for user login. Please keep in mind that the authentication is done by separate function defined by :ref:`login-authenticator-setting` setting.  By default :ref:`login-authenticator-setting` function will use :ref:`user-login-fields-setting` setting to extract the login field from the validated serializer data either by using the 'login' key (which is used here) or the specific login field name(s) (e.g. 'username', 'email').  If you want different behavior, you need to override :ref:`login-authenticator-setting` in your settings.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DefaultLogin {
    #[serde(rename = "login")]
    pub login: String,
    #[serde(rename = "password")]
    pub password: String,
}

impl DefaultLogin {
    /// Default serializer used for user login. Please keep in mind that the authentication is done by separate function defined by :ref:`login-authenticator-setting` setting.  By default :ref:`login-authenticator-setting` function will use :ref:`user-login-fields-setting` setting to extract the login field from the validated serializer data either by using the 'login' key (which is used here) or the specific login field name(s) (e.g. 'username', 'email').  If you want different behavior, you need to override :ref:`login-authenticator-setting` in your settings.
    pub fn new(login: String, password: String) -> DefaultLogin {
        DefaultLogin {
            login,
            password,
        }
    }
}

