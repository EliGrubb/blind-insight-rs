/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrganizationInvitationCreate : HyperlinkedModelSerializer with `id` as the first field.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrganizationInvitationCreate {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "modified")]
    pub modified: String,
    #[serde(rename = "is_admin", skip_serializing_if = "Option::is_none")]
    pub is_admin: Option<bool>,
}

impl OrganizationInvitationCreate {
    /// HyperlinkedModelSerializer with `id` as the first field.
    pub fn new(id: String, url: String, email: String, created: String, modified: String) -> OrganizationInvitationCreate {
        OrganizationInvitationCreate {
            id,
            url,
            organization: None,
            email,
            created,
            modified,
            is_admin: None,
        }
    }
}

