/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Organization : HyperlinkedModelSerializer with `id` as the first field.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Organization {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "owner")]
    pub owner: String,
    #[serde(rename = "organization_users")]
    pub organization_users: Vec<String>,
    /// A human-readable name for this organization
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "is_active", skip_serializing_if = "Option::is_none")]
    pub is_active: Option<bool>,
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "modified")]
    pub modified: String,
    /// A unique ID used to identify this organization
    #[serde(rename = "slug")]
    pub slug: String,
}

impl Organization {
    /// HyperlinkedModelSerializer with `id` as the first field.
    pub fn new(id: String, url: String, owner: String, organization_users: Vec<String>, name: String, created: String, modified: String, slug: String) -> Organization {
        Organization {
            id,
            url,
            owner,
            organization_users,
            name,
            is_active: None,
            created,
            modified,
            slug,
        }
    }
}

