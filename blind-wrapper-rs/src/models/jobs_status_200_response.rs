/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobsStatus200Response {
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "processed", skip_serializing_if = "Option::is_none")]
    pub processed: Option<i32>,
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<i32>,
    #[serde(rename = "current_batch", skip_serializing_if = "Option::is_none")]
    pub current_batch: Option<i32>,
    #[serde(rename = "total_batches", skip_serializing_if = "Option::is_none")]
    pub total_batches: Option<i32>,
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

impl JobsStatus200Response {
    pub fn new() -> JobsStatus200Response {
        JobsStatus200Response {
            status: None,
            processed: None,
            total: None,
            current_batch: None,
            total_batches: None,
            error: None,
        }
    }
}

