/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`token_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TokenCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`token_refresh`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TokenRefreshError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`token_verify`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TokenVerifyError {
    UnknownValue(serde_json::Value),
}


/// Create a new token for the user with the given email and password. On success, returns a JSON web token which can be used in the `Authorization` header to make API requests.  The response will be an JSON object with the access and refresh tokens.  **On the command line:**  ```bash blind token create --data '{\"email\": \"demo@example.com\", \"password\": \"pass1234\"}' ```
pub async fn token_create(configuration: &configuration::Configuration, token_obtain_pair: models::TokenObtainPair) -> Result<models::TokenObtainPair, Error<TokenCreateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_token_obtain_pair = token_obtain_pair;

    let uri_str = format!("{}/api/token/", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_token_obtain_pair);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TokenObtainPair`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TokenObtainPair`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TokenCreateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Refresh an existing token. On success, returns a JSON web token which can be used in the `Authorization` header to make API requests.  The response will be an JSON object with the new access token.  **On the command line:**  ```bash blind token refresh --data '{\"refresh\": \"<refresh-token>\"}' ```
pub async fn token_refresh(configuration: &configuration::Configuration, token_refresh: models::TokenRefresh) -> Result<models::TokenRefresh, Error<TokenRefreshError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_token_refresh = token_refresh;

    let uri_str = format!("{}/api/token/refresh/", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_token_refresh);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TokenRefresh`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TokenRefresh`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TokenRefreshError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Verify an access or refresh token is valid.  The response will be an empty object if it is valid, or a 401 unauthorized error if it is not.  **On the command line:**  ```bash blind token verify --data '{\"token\": \"<access-or-refresh-token>\"}' ```
pub async fn token_verify(configuration: &configuration::Configuration, token_verify: models::TokenVerify) -> Result<models::TokenVerify, Error<TokenVerifyError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_token_verify = token_verify;

    let uri_str = format!("{}/api/token/verify/", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_token_verify);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TokenVerify`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TokenVerify`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TokenVerifyError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

