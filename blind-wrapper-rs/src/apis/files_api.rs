/*
 * Blind Insight REST API
 *
 * End-to-end encrypted datastore
 *
 * The version of the OpenAPI document: 10.6.2
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`files_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesCreateError {
    Status400(),
    Status412(),
    Status413(),
    Status415(),
    Status460(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`files_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesDeleteError {
    Status412(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`files_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesPatchError {
    Status400(),
    Status404(),
    Status409(),
    Status412(),
    Status415(),
    Status460(),
    UnknownValue(serde_json::Value),
}


/// Create a new upload resource. The Upload-Length header indicates the size of the entire upload in bytes.  **On the command line:**  ```bash blind files create --Tus-Resumable 1.0.0  --Upload-Length 1000 --data records.json ```
pub async fn files_create(configuration: &configuration::Configuration, tus_resumable: &str, upload_length: i32, upload_metadata: &str, content_length: Option<i32>, body: Option<std::path::PathBuf>) -> Result<(), Error<FilesCreateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tus_resumable = tus_resumable;
    let p_upload_length = upload_length;
    let p_upload_metadata = upload_metadata;
    let p_content_length = content_length;
    let _p_body = body;

    let uri_str = format!("{}/api/files/", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_content_length {
        req_builder = req_builder.header("Content-Length", param_value.to_string());
    }
    req_builder = req_builder.header("Tus-Resumable", p_tus_resumable.to_string());
    req_builder = req_builder.header("Upload-Length", p_upload_length.to_string());
    req_builder = req_builder.header("Upload-Metadata", p_upload_metadata.to_string());
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    //if let Some(p_body_path) = p_body {
        // if json
            // call req_builder.json?
        // if plaintext
    //    req_builder = req_builder.body(p_body_path);
    //}

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<FilesCreateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Delete an upload resource.  **On the command line:**  ```bash blind files delete --id \"<upload-id>\" ```
pub async fn files_delete(configuration: &configuration::Configuration, tus_resumable: &str, id: &str) -> Result<serde_json::Value, Error<FilesDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tus_resumable = tus_resumable;
    let p_id = id;

    let uri_str = format!("{}/api/files/{id}/", configuration.base_path, id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Tus-Resumable", p_tus_resumable.to_string());
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FilesDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Upload a chunk of a file.  **On the command line:**  ```bash blind files patch --id \"<upload-id>\" --Upload-Offset 1000 --Upload-Checksum \"b64:checksum\" --data records.json ```
pub async fn files_patch(configuration: &configuration::Configuration, content_type: &str, id: &str, upload_checksum: Option<&str>, body: Option<std::path::PathBuf>) -> Result<(), Error<FilesPatchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_content_type = content_type;
    let p_id = id;
    let p_upload_checksum = upload_checksum;
    let _p_body = body;

    let uri_str = format!("{}/api/files/{id}/", configuration.base_path, id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("Content-Type", p_content_type.to_string());
    if let Some(param_value) = p_upload_checksum {
        req_builder = req_builder.header("Upload-Checksum", param_value.to_string());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    //req_builder = req_builder.body(p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<FilesPatchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

